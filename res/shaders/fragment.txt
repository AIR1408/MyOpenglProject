#version 460

struct Material
{
	bool mode;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

in vec3 fragPos;
in vec3 normal;
in vec3 color;
in vec2 texCoord;

uniform sampler2D Texture0;
uniform sampler2D Texture11;
uniform sampler2D Texture12;
uniform sampler2D Texture13;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform Material material;

out vec4 frag_color;
void main(){
	vec3 norm       = normalize(normal);
	vec3 lightDir   = normalize(lightPos - fragPos);
	vec3 viewDir    = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);  
	
	float ambientComp  = 0.1;
	float diffuseComp  = max(dot(norm, lightDir), 0.0);
	float specularComp = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	
	vec3 ambient  = lightColor * ambientComp  * (material.ambient  + vec3(texture(Texture11, texCoord))) / 2;
	vec3 diffuse  = lightColor * diffuseComp  * (material.diffuse  + vec3(texture(Texture12, texCoord))) / 2;
	vec3 specular = lightColor * specularComp * (material.specular + vec3(texture(Texture13, texCoord))) / 2;
	
	
	vec3 result = (ambient + diffuse + specular);
	frag_color  = (vec4(result, 1.0) + texture(Texture0, texCoord)) / 2;
}